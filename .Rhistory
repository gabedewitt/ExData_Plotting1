split(mtcars,mtcars$cyl)['4']
split(mtcars,mtcars$cyl)['4']['4$hp']
split(mtcars,mtcars$cyl)['4']
split(mtcars$cyl,mtcars$hp)['4']
split(mtcars$cyl,mtcars$hp)
split(mtcars,mtcars$cyl)[$hp]
split(mtcars,mtcars$cyl)['$hp']
4cyl <- split(mtcars,mtcars$cyl)['4']
cyl_4 <- split(mtcars,mtcars$cyl)['4']
cyl_8 <- split(mtcars,mtcars$cyl)['8']
cyl_4
cyl_4['hp']
colnames(cyl_4)
cyl_4 <- as.data.frame(cyl_4)
cyl_8 <- as.data.frame(cyl_8)
cyl_4['hp']
cyl_4
lapply(cyl_4['X4.hp'],mean)
lapply(cyl_8['X8.hp'],mean)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
View(flags_colors)
View(flags_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals <
unique_vals
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric[1])
ok
vapply(flags, unique, numeric[1])
ok()
sapply(flags,class)
vapply(flags, class, character[1])
ok()
vapply(flags, class, character[1])
ok()
vapply(flags, class, character(1))
?tapply(vector, index, function)
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
quit()
?inverse
library(matlib)
?matrix.inverse
?matrix
A <- matrix( c ( 1, 2, 2, 1 ), nrow=2, byrow=TRUE)
print( A )
invA <- matrix.inverse( A )
print( invA )
del A
?inverse
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
inverse
?inverse
library(matlib)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
cacheSolve()
cacheSolve(B1)
cacheSolve(A)
makeCacheMatrix(A)
A1 <- makeCacheMatrix(A)
cacheSolve(A1)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
system.time()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
sample(c(0,1),100,prob = c(0.3, 0.7))
flips <- sample(c(0,1),100, prob = c(0.3, 0.7), replace = TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob= 0.7)
flips2 <- rbinom(100, size=1, prob= 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=10, sd= 25)
rnorm(10, mean=100, sd= 25)
rpois(5, mean=10)
?rpois
rpois(5, lambda = =10)
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
cm
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
play()
data(mtcars)
dim(mtcars)
head(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
bye()
quit()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size)
)
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country =="US")
?Comparison
filter(cran, r_version <= "3.0.2", country =="IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os =="linux")
filter(cran, size > 100500, r_os =="linux")
filter(cran, size > 100500 & r_os =="linux-gnu")
filter(cran, size > 100500, r_os =="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, r_version == !is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, asc(country), desc(r_version), asc(ip_id))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- arrange(cran2, ip_id, package, size)
cran3 <- select(cran2, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_gb = size / 2^30)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
mean(by_package$size)
summarize(by_package, mean(size))
submit()
submit(summarize1)
submit("summarize1.R")
source('C:/Users/gabri/AppData/Local/Temp/RtmpeEcCSx/summarize1.R')
submit("summarize1.R")
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
arrange(top_counts, desc(count))
top_count_sorted <- arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
rm(top_count_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
reset()
swirl()
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit(cran %>% select(ip_id, country, package, size) %>% print)
submit()
submit()
submit()
submit()
submit()
submit()
library(tydir)
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, key = sex_class, value = count)
res <- gather(students2, key = sex_class, value = count, -grade)
res
?separate
separate(res, sex_class, into = c("sex","class"))
submit()
students3
submit()
submit()
submit()
reset()
swirl()
submit()
submit()
?spread
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
quit()
source('~/Coursera/run_analysis.R')
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution)
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
rug(ppm, col = "green")
hist(ppm, col = "green")
abline(h = 12, lwd = 2)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = 12, lwd = 4, col = "magenta")
hist(ppm, col = "green")
abline(v = median(ppm), lwd = 4, col = "magenta")
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~regoion, data = pollution, col = "red")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset()
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col= "green")
hist((subset(pollution, region == "west"))$pm25, col= "green")
hist(subset(pollution, region == "west")$pm25, col= "green")
plot(pollution)
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(mtcars, plot())
with(mtcars, plot)
with(faithful, plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.curr()
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with((cars, plot(speed, dist)))
with(cars, plot(speed, dist)))
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2.2))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwl, data = mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
quit()
library(swirl)
swirl()
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind~Ozone))
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
par()
length(par())
names(par())
par()$pin
par()$fg
?pch
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, month == 5)
may <- subset(airquality, Month == 5)
points(may, pch = 24, col = "blue")
points(may, pch = 17, col = "blue")
points(may$Wind, may$Ozone, pch = 17, col = "blue")
points(may$Wind, may$Ozone,col=blue, pch = 17)
points(may$Wind, may$Ozone,col="blue", pch = 17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone,col="red", pch = 8)
legend("topright",pch = c(17,8), col = ("blue", "red"), legend = ("May", "Other Months"))
legend("topright", pch = c(17,8), col = ("blue", "red"), legend = ("May", "Other Months"))
legend("topright", pch = c(17,8), col = ("blue", "red"), legend = ("May", "Other Months"))
asuhd
legend("topright", pch = c(17,8), legend = ("May", "Other Months"))
legend("topright" pch = c(17,8) col = ("blue", "red") legend = ("May", "Other Months"))
legend("topright", pch = c(17,8) col = ("blue", "red") legend = ("May", "Other Months"))
legend("topright", pch = c(17,8), col = ("blue", "red") legend = ("May", "Other Months"))
legend("topright", pch = c(17,8), col = c("blue", "red") legend = c("May", "Other Months"))
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main - "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main - "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone , main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Temp, main = "Ozone and Temperature")
plot(airquality$Temp, airquality$Ozone,  main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
quit
quit()
setwd("~/Coursera/ExData_Plotting1")
setwd("./Coursera/ExData_Plotting1")
setwd("./Coursera/ExData_Plotting1")
setwd("~/ExData_Plotting1")
setwd("./ExData_Plotting1")
source('~/Coursera/ExData_Plotting1/ExData_Plotting1/plot1.R')
if (!dir.exists("getdata_projectfiles_UCI HAR Dataset")) {
unzip("exdata_data_household_power_consumption.zip")
}
source('~/Coursera/ExData_Plotting1/ExData_Plotting1/plot1.R')
read.table("household_power_consumption.txt")
summary(read.table("household_power_consumption.txt"))
source('~/Coursera/ExData_Plotting1/ExData_Plotting1/plot1.R')
head(power_data)
source('~/Coursera/ExData_Plotting1/ExData_Plotting1/plot1.R')
head(power_data)
?read.table
source('~/Coursera/ExData_Plotting1/ExData_Plotting1/plot1.R')
head(power_data)
summary(power_data)
1440*2
source('~/Coursera/ExData_Plotting1/ExData_Plotting1/plot1.R')
grep("2007-02-01", readLines("household_power_consumption.txt"))
as.Date("2007-02-01")
grep(as.Date("01/02/2007"), readLines("household_power_consumption.txt"))
grep("01/02/2007", readLines("household_power_consumption.txt"))
grep("01/01/2007", readLines("household_power_consumption.txt"))
readLines("household_power_consumption.txt")
grep("^01/01/2007", readLines("household_power_consumption.txt"))
grep("01/01/2007;.", readLines("household_power_consumption.txt"))
